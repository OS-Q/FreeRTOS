; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\ --list_dir=.\Flash\ --depend=.\flash\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\User\bsp -I..\User\bsp\inc -I..\User -I..\..\Libraries\CMSIS\Include -I..\..\FreeRTOS\include -I..\..\FreeRTOS\portable\RVDS\ARM_CM3 -I.\RTE\_Flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.3.0\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.3.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\main.crf ..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;369    */
;;;370    static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;371    {
;;;372    	/* 创建10个uint8_t型消息队列 */
;;;373    	xQueue1 = xQueueCreate(10, sizeof(uint8_t));
000002  2200              MOVS     r2,#0
000004  2101              MOVS     r1,#1
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       xQueueGenericCreate
00000c  4904              LDR      r1,|L1.32|
00000e  6008              STR      r0,[r1,#0]  ; xQueue1
;;;374        if( xQueue1 == 0 )
;;;375        {
;;;376            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;377        }
;;;378    	
;;;379    	/* 创建10个存储指针变量的消息队列，由于CM3是32位机，一个指针变量占用4个字节 */
;;;380    	xQueue2 = xQueueCreate(10, sizeof(struct Msg *));
000010  2200              MOVS     r2,#0
000012  2104              MOVS     r1,#4
000014  200a              MOVS     r0,#0xa
000016  f7fffffe          BL       xQueueGenericCreate
00001a  4902              LDR      r1,|L1.36|
00001c  6008              STR      r0,[r1,#0]  ; xQueue2
;;;381        if( xQueue2 == 0 )
;;;382        {
;;;383            /* 没有创建成功，用户可以在这里加入创建失败的处理机制 */
;;;384        }
;;;385    }
00001e  bd10              POP      {r4,pc}
;;;386    
                          ENDP

                  |L1.32|
                          DCD      xQueue1
                  |L1.36|
                          DCD      xQueue2

                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;328    */
;;;329    static void AppTaskCreate (void)
000000  b51c              PUSH     {r2-r4,lr}
;;;330    {
;;;331        xTaskCreate(    vTaskTaskUserIF,   /* 任务函数  */
000002  2000              MOVS     r0,#0
000004  2101              MOVS     r1,#1
000006  4603              MOV      r3,r0
000008  024a              LSLS     r2,r1,#9
00000a  e9cd1000          STRD     r1,r0,[sp,#0]
00000e  a112              ADR      r1,|L2.88|
000010  4814              LDR      r0,|L2.100|
000012  f7fffffe          BL       xTaskCreate
;;;332                        "vTaskUserIF",     /* 任务名    */
;;;333                        512,               /* stack大小，单位word，也就是4字节 */
;;;334                        NULL,              /* 任务参数  */
;;;335                        1,                 /* 任务优先级*/
;;;336                        NULL );            /* 任务句柄  */
;;;337    	
;;;338    	
;;;339    	xTaskCreate(    vTaskLED,        	/* 任务函数  */
000016  4814              LDR      r0,|L2.104|
000018  2102              MOVS     r1,#2
00001a  2300              MOVS     r3,#0
00001c  020a              LSLS     r2,r1,#8
00001e  e9cd1000          STRD     r1,r0,[sp,#0]
000022  a112              ADR      r1,|L2.108|
000024  4814              LDR      r0,|L2.120|
000026  f7fffffe          BL       xTaskCreate
;;;340                        "vTaskLED",      	/* 任务名    */
;;;341                        512,             	/* stack大小，单位word，也就是4字节 */
;;;342                        NULL,            	/* 任务参数  */
;;;343                        2,                  /* 任务优先级*/
;;;344                        &xHandleTaskLED );  /* 任务句柄  */
;;;345    	
;;;346    	xTaskCreate(    vTaskMsgPro,     /* 任务函数  */
00002a  4814              LDR      r0,|L2.124|
00002c  2103              MOVS     r1,#3
00002e  2300              MOVS     r3,#0
000030  f44f7200          MOV      r2,#0x200
000034  e9cd1000          STRD     r1,r0,[sp,#0]
000038  a111              ADR      r1,|L2.128|
00003a  4814              LDR      r0,|L2.140|
00003c  f7fffffe          BL       xTaskCreate
;;;347                        "vTaskMsgPro",   /* 任务名    */
;;;348                        512,             /* stack大小，单位word，也就是4字节 */
;;;349                        NULL,            /* 任务参数  */
;;;350                        3,               /* 任务优先级*/
;;;351                        &xHandleTaskMsgPro );  /* 任务句柄  */
;;;352    	
;;;353    	
;;;354    	xTaskCreate(    vTaskStart,     /* 任务函数  */
000040  2000              MOVS     r0,#0
000042  2104              MOVS     r1,#4
000044  4603              MOV      r3,r0
000046  01ca              LSLS     r2,r1,#7
000048  e9cd1000          STRD     r1,r0,[sp,#0]
00004c  a110              ADR      r1,|L2.144|
00004e  4813              LDR      r0,|L2.156|
000050  f7fffffe          BL       xTaskCreate
;;;355                        "vTaskStart",   /* 任务名    */
;;;356                        512,            /* stack大小，单位word，也就是4字节 */
;;;357                        NULL,           /* 任务参数  */
;;;358                        4,              /* 任务优先级*/
;;;359                        NULL );         /* 任务句柄  */
;;;360    }
000054  bd1c              POP      {r2-r4,pc}
;;;361    
                          ENDP

000056  0000              DCW      0x0000
                  |L2.88|
000058  76546173          DCB      "vTaskUserIF",0
00005c  6b557365
000060  72494600
                  |L2.100|
                          DCD      vTaskTaskUserIF
                  |L2.104|
                          DCD      xHandleTaskLED
                  |L2.108|
00006c  76546173          DCB      "vTaskLED",0
000070  6b4c4544
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0
                  |L2.120|
                          DCD      vTaskLED
                  |L2.124|
                          DCD      xHandleTaskMsgPro
                  |L2.128|
000080  76546173          DCB      "vTaskMsgPro",0
000084  6b4d7367
000088  50726f00
                  |L2.140|
                          DCD      vTaskMsgPro
                  |L2.144|
000090  76546173          DCB      "vTaskStart",0
000094  6b537461
000098  727400  
00009b  00                DCB      0
                  |L2.156|
                          DCD      vTaskStart

                          AREA ||i.OS_PostSleepProcessing||, CODE, READONLY, ALIGN=1

                  OS_PostSleepProcessing PROC
;;;422    
;;;423    void OS_PostSleepProcessing(uint32_t vParameters)
000000  b510              PUSH     {r4,lr}
;;;424    {
000002  4604              MOV      r4,r0
;;;425    	/* 重新开启时钟 */
;;;426    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
000004  2101              MOVS     r1,#1
000006  2080              MOVS     r0,#0x80
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;427    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0388              LSLS     r0,r1,#14
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;428    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
000014  2101              MOVS     r1,#1
000016  2005              MOVS     r0,#5
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;429    }
00001c  bd10              POP      {r4,pc}
;;;430    
                          ENDP


                          AREA ||i.OS_PreSleepProcessing||, CODE, READONLY, ALIGN=1

                  OS_PreSleepProcessing PROC
;;;414    */
;;;415    void OS_PreSleepProcessing(uint32_t vParameters)
000000  b510              PUSH     {r4,lr}
;;;416    {
000002  4604              MOV      r4,r0
;;;417    	/* 关闭时钟 */
;;;418    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, DISABLE);
000004  2100              MOVS     r1,#0
000006  2080              MOVS     r0,#0x80
000008  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;419    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, DISABLE);
00000c  2100              MOVS     r1,#0
00000e  f44f4080          MOV      r0,#0x4000
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;420    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, DISABLE);
000016  2100              MOVS     r1,#0
000018  2005              MOVS     r0,#5
00001a  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;421    }
00001e  bd10              POP      {r4,pc}
;;;422    
                          ENDP


                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;125    */
;;;126    int main(void)
000000  f7fffffe          BL       bsp_Init
;;;127    {
;;;128    	/* 硬件初始化初始化 */
;;;129    	bsp_Init(); 
;;;130    	
;;;131    	/* 创建任务 */
;;;132    	AppTaskCreate();
000004  f7fffffe          BL       AppTaskCreate
;;;133    	
;;;134    	/* 创建任务通信机制 */
;;;135    	AppObjCreate();
000008  f7fffffe          BL       AppObjCreate
;;;136    	
;;;137        /* 启动调度，开始执行任务 */
;;;138        vTaskStartScheduler();
00000c  f7fffffe          BL       vTaskStartScheduler
;;;139    
;;;140    	/* 如果系统正常启动是不会运行到这里的，运行到这里极有可能是空闲任务heap空间不足造成创建失败 */
;;;141    	while(1);
000010  bf00              NOP      
                  |L5.18|
000012  e7fe              B        |L5.18|
;;;142    }
;;;143    
                          ENDP


                          AREA ||i.vTaskLED||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vTaskLED PROC
;;;237    */
;;;238    static void vTaskLED(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;239    {
;;;240    	MSG_T *ptMsg;
;;;241    	BaseType_t xResult;
;;;242    	const TickType_t xMaxBlockTime = pdMS_TO_TICKS(200); /* 设置最大等待时间为200ms */
000002  bf00              NOP      
;;;243    	
;;;244        while(1)
000004  e01e              B        |L6.68|
                  |L6.6|
;;;245        {
;;;246    		xResult = xQueueReceive(xQueue2,                   /* 消息队列句柄 */
000006  22c8              MOVS     r2,#0xc8
000008  4669              MOV      r1,sp
00000a  480f              LDR      r0,|L6.72|
00000c  6800              LDR      r0,[r0,#0]  ; xQueue2
00000e  f7fffffe          BL       xQueueReceive
000012  4604              MOV      r4,r0
;;;247    		                        (void *)&ptMsg,  		   /* 这里获取的是结构体的地址 */
;;;248    		                        (TickType_t)xMaxBlockTime);/* 设置阻塞时间 */
;;;249    		
;;;250    		
;;;251    		if(xResult == pdPASS)
000014  2c01              CMP      r4,#1
000016  d10f              BNE      |L6.56|
;;;252    		{
;;;253    			/* 成功接收，并通过串口将数据打印出来 */
;;;254    			printf("接收到消息队列数据ptMsg->ucMessageID = %d\r\n", ptMsg->ucMessageID);
000018  9800              LDR      r0,[sp,#0]
00001a  7801              LDRB     r1,[r0,#0]
00001c  a00b              ADR      r0,|L6.76|
00001e  f7fffffe          BL       __2printf
;;;255    			printf("接收到消息队列数据ptMsg->ulData[0] = %d\r\n", ptMsg->ulData[0]);
000022  9800              LDR      r0,[sp,#0]
000024  6881              LDR      r1,[r0,#8]
000026  a014              ADR      r0,|L6.120|
000028  f7fffffe          BL       __2printf
;;;256    			printf("接收到消息队列数据ptMsg->usData[0] = %d\r\n", ptMsg->usData[0]);
00002c  9800              LDR      r0,[sp,#0]
00002e  8841              LDRH     r1,[r0,#2]
000030  a01c              ADR      r0,|L6.164|
000032  f7fffffe          BL       __2printf
000036  e005              B        |L6.68|
                  |L6.56|
;;;257    		}
;;;258    		else
;;;259    		{
;;;260    			/* 超时 */
;;;261    			bsp_LedToggle(2);
000038  2002              MOVS     r0,#2
00003a  f7fffffe          BL       bsp_LedToggle
;;;262    			bsp_LedToggle(3);
00003e  2003              MOVS     r0,#3
000040  f7fffffe          BL       bsp_LedToggle
                  |L6.68|
000044  e7df              B        |L6.6|
;;;263    		}
;;;264        }
;;;265    }
;;;266    
                          ENDP

000046  0000              DCW      0x0000
                  |L6.72|
                          DCD      xQueue2
                  |L6.76|
00004c  bdd3cad5          DCB      189,211,202,213,181,189,207,251,207,162,182,211,193,208,202
000050  b5bdcffb
000054  cfa2b6d3
000058  c1d0ca  
00005b  fdbedd70          DCB      253,190,221,"ptMsg->ucMessageID = %d\r\n",0
00005f  744d7367
000063  2d3e7563
000067  4d657373
00006b  61676549
00006f  44203d20
000073  25640d0a
000077  00      
                  |L6.120|
000078  bdd3cad5          DCB      189,211,202,213,181,189,207,251,207,162,182,211,193,208,202
00007c  b5bdcffb
000080  cfa2b6d3
000084  c1d0ca  
000087  fdbedd70          DCB      253,190,221,"ptMsg->ulData[0] = %d\r\n",0
00008b  744d7367
00008f  2d3e756c
000093  44617461
000097  5b305d20
00009b  3d202564
00009f  0d0a00  
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L6.164|
0000a4  bdd3cad5          DCB      189,211,202,213,181,189,207,251,207,162,182,211,193,208,202
0000a8  b5bdcffb
0000ac  cfa2b6d3
0000b0  c1d0ca  
0000b3  fdbedd70          DCB      253,190,221,"ptMsg->usData[0] = %d\r\n",0
0000b7  744d7367
0000bb  2d3e7573
0000bf  44617461
0000c3  5b305d20
0000c7  3d202564
0000cb  0d0a00  
0000ce  00                DCB      0
0000cf  00                DCB      0

                          AREA ||i.vTaskMsgPro||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vTaskMsgPro PROC
;;;275    */
;;;276    static void vTaskMsgPro(void *pvParameters)
000000  b508              PUSH     {r3,lr}
;;;277    {
;;;278    	BaseType_t xResult;
;;;279    	const TickType_t xMaxBlockTime = pdMS_TO_TICKS(300); /* 设置最大等待时间为300ms */
000002  bf00              NOP      
;;;280    	uint8_t ucQueueMsgValue;
;;;281    	
;;;282        while(1)
000004  e015              B        |L7.50|
                  |L7.6|
;;;283        {
;;;284    		xResult = xQueueReceive(xQueue1,                   /* 消息队列句柄 */
000006  f44f7296          MOV      r2,#0x12c
00000a  4669              MOV      r1,sp
00000c  4809              LDR      r0,|L7.52|
00000e  6800              LDR      r0,[r0,#0]  ; xQueue1
000010  f7fffffe          BL       xQueueReceive
000014  4604              MOV      r4,r0
;;;285    		                        (void *)&ucQueueMsgValue,  /* 存储接收到的数据到变量ucQueueMsgValue中 */
;;;286    		                        (TickType_t)xMaxBlockTime);/* 设置阻塞时间 */
;;;287    		
;;;288    		if(xResult == pdPASS)
000016  2c01              CMP      r4,#1
000018  d105              BNE      |L7.38|
;;;289    		{
;;;290    			/* 成功接收，并通过串口将数据打印出来 */
;;;291    			printf("接收到消息队列数据ucQueueMsgValue = %d\r\n", ucQueueMsgValue);
00001a  f89d1000          LDRB     r1,[sp,#0]
00001e  a006              ADR      r0,|L7.56|
000020  f7fffffe          BL       __2printf
000024  e005              B        |L7.50|
                  |L7.38|
;;;292    		}
;;;293    		else
;;;294    		{
;;;295    			/* 超时 */
;;;296    			bsp_LedToggle(1);
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       bsp_LedToggle
;;;297    			bsp_LedToggle(4);
00002c  2004              MOVS     r0,#4
00002e  f7fffffe          BL       bsp_LedToggle
                  |L7.50|
000032  e7e8              B        |L7.6|
;;;298    		}
;;;299        }
;;;300    }
;;;301    
                          ENDP

                  |L7.52|
                          DCD      xQueue1
                  |L7.56|
000038  bdd3cad5          DCB      189,211,202,213,181,189,207,251,207,162,182,211,193,208,202
00003c  b5bdcffb
000040  cfa2b6d3
000044  c1d0ca  
000047  fdbedd75          DCB      253,190,221,"ucQueueMsgValue = %d\r\n",0
00004b  63517565
00004f  75654d73
000053  6756616c
000057  7565203d
00005b  2025640d
00005f  0a00    
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.vTaskStart||, CODE, READONLY, ALIGN=1

                  vTaskStart PROC
;;;310    */
;;;311    static void vTaskStart(void *pvParameters)
000000  e004              B        |L8.12|
                  |L8.2|
;;;312    {
;;;313        while(1)
;;;314        {
;;;315    		/* 按键扫描 */
;;;316    		bsp_KeyScan();
000002  f7fffffe          BL       bsp_KeyScan
;;;317            vTaskDelay(10);
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       vTaskDelay
                  |L8.12|
00000c  e7f9              B        |L8.2|
;;;318        }
;;;319    }
;;;320    
                          ENDP


                          AREA ||i.vTaskTaskUserIF||, CODE, READONLY, ALIGN=2

                  vTaskTaskUserIF PROC
;;;152    */
;;;153    static void vTaskTaskUserIF(void *pvParameters)
000000  b51c              PUSH     {r2-r4,lr}
;;;154    {
;;;155    	MSG_T   *ptMsg;
;;;156    	uint8_t ucCount = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;157    	uint8_t ucKeyCode;
;;;158    	
;;;159    	/* 初始化结构体指针 */
;;;160    	ptMsg = &g_tMsg;
000006  4829              LDR      r0,|L9.172|
000008  9001              STR      r0,[sp,#4]
;;;161    	
;;;162    	/* 初始化数组 */
;;;163    	ptMsg->ucMessageID = 0;
00000a  2000              MOVS     r0,#0
00000c  9901              LDR      r1,[sp,#4]
00000e  7008              STRB     r0,[r1,#0]
;;;164    	ptMsg->ulData[0] = 0;
000010  9901              LDR      r1,[sp,#4]
000012  6088              STR      r0,[r1,#8]
;;;165    	ptMsg->usData[0] = 0;
000014  9901              LDR      r1,[sp,#4]
000016  8048              STRH     r0,[r1,#2]
;;;166    
;;;167        while(1)
000018  e047              B        |L9.170|
                  |L9.26|
;;;168        {
;;;169    		ucKeyCode = bsp_GetKey();
00001a  f7fffffe          BL       bsp_GetKey
00001e  4604              MOV      r4,r0
;;;170    		
;;;171    		if (ucKeyCode != KEY_NONE)
000020  2c00              CMP      r4,#0
000022  d03f              BEQ      |L9.164|
;;;172    		{
;;;173    			switch (ucKeyCode)
000024  2c01              CMP      r4,#1
000026  d004              BEQ      |L9.50|
000028  2c04              CMP      r4,#4
00002a  d003              BEQ      |L9.52|
00002c  2c07              CMP      r4,#7
00002e  d137              BNE      |L9.160|
000030  e016              B        |L9.96|
                  |L9.50|
;;;174    			{
;;;175    				/* K1键按下 打印任务执行情况 */
;;;176    				case KEY_DOWN_K1:
;;;177    					break;
000032  e036              B        |L9.162|
                  |L9.52|
;;;178    				
;;;179    				/* K2键按下，向xQueue1发送数据 */
;;;180    				case KEY_DOWN_K2:
;;;181    					ucCount++;
000034  f89d0000          LDRB     r0,[sp,#0]
000038  1c40              ADDS     r0,r0,#1
00003a  b2c0              UXTB     r0,r0
00003c  9000              STR      r0,[sp,#0]
;;;182    				
;;;183    					/* 向消息队列发数据，如果消息队列满了，等待10个时钟节拍 */
;;;184    					if( xQueueSend(xQueue1,
00003e  2300              MOVS     r3,#0
000040  220a              MOVS     r2,#0xa
000042  4669              MOV      r1,sp
000044  481a              LDR      r0,|L9.176|
000046  6800              LDR      r0,[r0,#0]  ; xQueue1
000048  f7fffffe          BL       xQueueGenericSend
00004c  2801              CMP      r0,#1
00004e  d003              BEQ      |L9.88|
;;;185    								   (void *) &ucCount,
;;;186    								   (TickType_t)10) != pdPASS )
;;;187    					{
;;;188    						/* 发送失败，即使等待了10个时钟节拍 */
;;;189    						printf("K2键按下，向xQueue1发送数据失败，即使等待了10个时钟节拍\r\n");
000050  a018              ADR      r0,|L9.180|
000052  f7fffffe          BL       __2printf
000056  e002              B        |L9.94|
                  |L9.88|
;;;190    					}
;;;191    					else
;;;192    					{
;;;193    						/* 发送成功 */
;;;194    						printf("K2键按下，向xQueue1发送数据成功\r\n");						
000058  a025              ADR      r0,|L9.240|
00005a  f7fffffe          BL       __2printf
                  |L9.94|
;;;195    					}
;;;196    					break;
00005e  e020              B        |L9.162|
                  |L9.96|
;;;197    				
;;;198    				/* K3键按下，向xQueue2发送数据 */
;;;199    				case KEY_DOWN_K3:
;;;200    					ptMsg->ucMessageID++;
000060  9801              LDR      r0,[sp,#4]
000062  7800              LDRB     r0,[r0,#0]
000064  1c40              ADDS     r0,r0,#1
000066  9901              LDR      r1,[sp,#4]
000068  7008              STRB     r0,[r1,#0]
;;;201    					ptMsg->ulData[0]++;;
00006a  9801              LDR      r0,[sp,#4]
00006c  6880              LDR      r0,[r0,#8]
00006e  1c40              ADDS     r0,r0,#1
000070  9901              LDR      r1,[sp,#4]
000072  6088              STR      r0,[r1,#8]
;;;202    					ptMsg->usData[0]++;
000074  9801              LDR      r0,[sp,#4]
000076  8840              LDRH     r0,[r0,#2]
000078  1c40              ADDS     r0,r0,#1
00007a  9901              LDR      r1,[sp,#4]
00007c  8048              STRH     r0,[r1,#2]
;;;203    					
;;;204    					/* 使用消息队列实现指针变量的传递 */
;;;205    					if(xQueueSend(xQueue2,                  /* 消息队列句柄 */
00007e  2300              MOVS     r3,#0
000080  220a              MOVS     r2,#0xa
000082  a901              ADD      r1,sp,#4
000084  4823              LDR      r0,|L9.276|
000086  6800              LDR      r0,[r0,#0]  ; xQueue2
000088  f7fffffe          BL       xQueueGenericSend
00008c  2801              CMP      r0,#1
00008e  d003              BEQ      |L9.152|
;;;206    								 (void *) &ptMsg,           /* 发送结构体指针变量ptMsg的地址 */
;;;207    								 (TickType_t)10) != pdPASS )
;;;208    					{
;;;209    						/* 发送失败，即使等待了10个时钟节拍 */
;;;210    						printf("K3键按下，向xQueue2发送数据失败，即使等待了10个时钟节拍\r\n");
000090  a021              ADR      r0,|L9.280|
000092  f7fffffe          BL       __2printf
000096  e002              B        |L9.158|
                  |L9.152|
;;;211    					}
;;;212    					else
;;;213    					{
;;;214    						/* 发送成功 */
;;;215    						printf("K3键按下，向xQueue2发送数据成功\r\n");						
000098  a02e              ADR      r0,|L9.340|
00009a  f7fffffe          BL       __2printf
                  |L9.158|
;;;216    					}
;;;217    				
;;;218    				
;;;219    				/* 其他的键值不处理 */
;;;220    				default:                     
00009e  bf00              NOP      
                  |L9.160|
;;;221    					break;
0000a0  bf00              NOP      
                  |L9.162|
0000a2  bf00              NOP                            ;177
                  |L9.164|
;;;222    			}
;;;223    		}
;;;224    		
;;;225    		vTaskDelay(10);
0000a4  200a              MOVS     r0,#0xa
0000a6  f7fffffe          BL       vTaskDelay
                  |L9.170|
0000aa  e7b6              B        |L9.26|
;;;226    	}
;;;227    }
;;;228    
                          ENDP

                  |L9.172|
                          DCD      g_tMsg
                  |L9.176|
                          DCD      xQueue1
                  |L9.180|
0000b4  4b32bcfc          DCB      "K2",188,252,176,180,207,194,163,172,207,242,"xQueue1",183
0000b8  b0b4cfc2
0000bc  a3accff2
0000c0  78517565
0000c4  756531b7
0000c8  a2cbcdca          DCB      162,203,205,202,253,190,221,202,167,176,220,163,172,188,180
0000cc  fdbeddca
0000d0  a7b0dca3
0000d4  acbcb4  
0000d7  cab9b5c8          DCB      202,185,181,200,180,253,193,203,"10",184,246,202,177,214
0000db  b4fdc1cb
0000df  3130b8f6
0000e3  cab1d6  
0000e6  d3bddac5          DCB      211,189,218,197,196,"\r\n",0
0000ea  c40d0a00
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L9.240|
0000f0  4b32bcfc          DCB      "K2",188,252,176,180,207,194,163,172,207,242,"xQueue1",183
0000f4  b0b4cfc2
0000f8  a3accff2
0000fc  78517565
000100  756531b7
000104  a2cbcdca          DCB      162,203,205,202,253,190,221,179,201,185,166,"\r\n",0
000108  fdbeddb3
00010c  c9b9a60d
000110  0a00    
000112  00                DCB      0
000113  00                DCB      0
                  |L9.276|
                          DCD      xQueue2
                  |L9.280|
000118  4b33bcfc          DCB      "K3",188,252,176,180,207,194,163,172,207,242,"xQueue2",183
00011c  b0b4cfc2
000120  a3accff2
000124  78517565
000128  756532b7
00012c  a2cbcdca          DCB      162,203,205,202,253,190,221,202,167,176,220,163,172,188,180
000130  fdbeddca
000134  a7b0dca3
000138  acbcb4  
00013b  cab9b5c8          DCB      202,185,181,200,180,253,193,203,"10",184,246,202,177,214
00013f  b4fdc1cb
000143  3130b8f6
000147  cab1d6  
00014a  d3bddac5          DCB      211,189,218,197,196,"\r\n",0
00014e  c40d0a00
000152  00                DCB      0
000153  00                DCB      0
                  |L9.340|
000154  4b33bcfc          DCB      "K3",188,252,176,180,207,194,163,172,207,242,"xQueue2",183
000158  b0b4cfc2
00015c  a3accff2
000160  78517565
000164  756532b7
000168  a2cbcdca          DCB      162,203,205,202,253,190,221,179,201,185,166,"\r\n",0
00016c  fdbeddb3
000170  c9b9a60d
000174  0a00    
000176  00                DCB      0
000177  00                DCB      0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tMsg
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  xHandleTaskLED
                          DCD      0x00000000
                  xHandleTaskMsgPro
                          DCD      0x00000000
                  xQueue1
                          DCD      0x00000000
                  xQueue2
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 128
|__asm___6_main_c_main____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
