/*
*********************************************************************************************************
*
*	版    本 : V1.0
*	说    明 : 本实验主要学习FreeRTOS的低功耗(Tickless Idle模式下关闭外设时钟)
*              实验目的：
*                1. 学习FreeRTOS的低功耗(Tickless Idle模式下关闭外设时钟)
*                2. FreeRTOS自带的tickless idle模式使用比较简单，只需用户使能宏配置：
*                   #define configUSE_TICKLESS_IDLE         1
*                3. 下面简单说明下如何在Tickless Idle模式下关闭外设时钟，通过这种方式进一步降低功耗：
*                    如下函数在文件FreeRTOSConfig.h文件里面进行了宏定义
*                    #define configPRE_SLEEP_PROCESSING(x)  OS_PreSleepProcessing(x)
*                    #define configPOST_SLEEP_PROCESSING(x) OS_PostSleepProcessing(x)
*                    在文件port.c里面函数vPortSuppressTicksAndSleep调用了上面这两个函数：
*                    ---------------------------------------------------------------------
*				     configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
*				     if( xModifiableIdleTime > 0 )
*				     {
*					     __dsb( portSY_FULL_READ_WRITE );
*					     __wfi();
*					     __isb( portSY_FULL_READ_WRITE );
*				     }
*				     configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
*                   -----------------------------------------------------------------------
*                   通过这两个函数可以实现在调用__WFI指令前后执行进一步的低功耗操作，主要有以下三种：
*                   a. 降低系统主频。
*             		b. 关闭外设时钟。
*            		c. IO引脚要做处理，防止拉电流和灌电流增加功耗。
*                      如果此IO口带上拉，请设置为高电平输出或者高阻态输入；
*                      如果此IO口带下拉，请设置为低电平输出或者高阻态输入；
*             		本实验做了关闭外设时钟的处理。
*                   a. 在函数OS_PreSleepProcessing 关闭外设时钟
*                   b. 在函数OS_PostSleepProcessing 开启外设时钟
*              实验内容：
*                4.  串口软件建议使用SecureCRT（V4光盘里面有此软件）查看打印信息。
*                    vTaskTaskUserIF 任务：按键消息处理
*                    vTaskLED 任务       ：使用函数xQueueReceive接收任务vTaskTaskUserIF发送的消息队列数据(xQueue2)
*                    vTaskMsgPro 任务    ：使用函数xQueueReceive接收任务vTaskTaskUserIF发送的消息队列数据(xQueue1)
*                    vTaskStart 任务     ：按键扫描
*                5. K2键按下，向xQueue1发送数据。
*                6. K3键按下，向xQueue2发送数据。
*                7. 关于低功耗的说明：
*                   (1) STM32F10xxx有三种低功耗模式
*                        a. 睡眠模式(Cortex-M3内核停止，所有外设包括Cortex-M3核心的外设，如NVIC、系统时
*                           钟(SysTick)等仍在运行)
*                        b. 停止模式(所有的时钟都已停止)
*                        c. 待机模式(1.8V电源关闭)
*                   (2) 通过指令__WFI进入休眠模式，可以通过任意中断唤醒。
*                   (3) 降低系统主频或者关闭外设时钟也可有效降低系统功耗。
*                8. FreeRTOS自带的tickless idle模式是调用的指令__WFI进入休眠模式。
*                9. 实际项目中推荐采用官方的tickless模式。
*              设计低功耗主要从以下几方面着手：
*                1. 用户需要根据最低电源消耗、最快速启动时间和可用的唤醒源等条件，选定一个最佳的低功耗模式。
*                   可以使用的低功耗方式有休眠模式，待机模式，停机模式。
*                2. 选择了低功耗方式后就是关闭可以关闭的外设时钟。
*                3. 降低系统主频。
*                4. 注意I/O的状态。
*                   如果此IO口带上拉，请设置为高电平输出或者高阻态输入；
*                   如果此IO口带下拉，请设置为低电平输出或者高阻态输入；
*                   a. 在睡眠模式下，所有的I/O引脚都保持它们在运行模式时的状态。
*                   b. 在停止模式下，所有的I/O引脚都保持它们在运行模式时的状态。
*                   c. 在待机模式下，所有的I/O引脚处于高阻态，除了以下的引脚：
*                      ● 复位引脚(始终有效)
*                      ● 当被设置为防侵入或校准输出时的TAMPER引脚
*                      ● 被使能的唤醒引脚
*                5. 注意IO和外设IC的连接。
*                6. 测低功耗的时候，一定不要连接调试器，更不能边调试边测电流。
*              注意事项：
*                 1. 本实验推荐使用串口软件SecureCRT，要不串口打印效果不整齐。此软件在
*                    V4开发板光盘里面有。
*                 2. 务必将编辑器的缩进参数和TAB设置为4来阅读本文件，要不代码显示不整齐。
*
*	修改记录 :
*		版本号    日期         作者            说明
*       V1.0    2015-08-19   Eric2013    1. ST固件库到V3.6.1版本
*                                        2. BSP驱动包V1.2
*                                        3. FreeRTOS版本V8.2.2
*
*	Copyright (C), 2015-2020, 安富莱电子 www.armfly.com
*
*********************************************************************************************************
*/